name: PR sync between release1.3 and release1.4

on:
  workflow_dispatch:  # Add this line for manual testing
  pull_request_target:
    types: [closed]
    branches:
      - "release1_3"

# Explicit permissions for GITHUB_TOKEN
permissions:
  contents: write      # Push to branches
  pull-requests: write # Comment on PRs  
  issues: write       # Create issues on conflicts

jobs:
  sync-pr-changes:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == "release1_3"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Sync PR changes to release1.4
        id: sync
        run: |
          #set +e  # Continue on errors
          
          PR_NUMBER=${{ github.event.pull_request.number }}
          SOURCE_BRANCH="release1_3"
          TARGET_BRANCH="release1.4"
          
          # Switch to target branch
          git checkout $TARGET_BRANCH
          git pull origin $TARGET_BRANCH
          
          # Switch to the source branch to find commits
          git checkout $SOURCE_BRANCH
          git pull origin $SOURCE_BRANCH
          
          # Find merge commit (for merge commits)
          MERGE_COMMIT=$(git log --merges --grep="#${PR_NUMBER}" --oneline -n 1 --format="%H")
          
          if [ -n "$MERGE_COMMIT" ]; then
            echo "Found merge commit: $MERGE_COMMIT"
            PARENT1=$(git rev-parse ${MERGE_COMMIT}^1)
            PARENT2=$(git rev-parse ${MERGE_COMMIT}^2)
            
            git checkout $TARGET_BRANCH
            git log --reverse --pretty=format:"%H" ${PARENT1}..${PARENT2} | while read commit; do
              echo "Cherry-picking: $commit"
              if ! git cherry-pick $commit; then
                echo "Conflict at commit: $commit"
                exit 1
              fi
            done
          fi
          
          git push origin $TARGET_BRANCH
          echo "success=true" >> $GITHUB_OUTPUT
      
      
